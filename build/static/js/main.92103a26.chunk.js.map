{"version":3,"sources":["utils.js","minimax.js","Uno.js","serviceWorker.js","index.js"],"names":["COLOR","COLOR_CARDS","genDeck","shuff","arguments","length","undefined","cards","forEach","color","colorCard","push","extra","a","i","j","Math","floor","random","_ref","shuffle","hexToRgb","hex","result","exec","result1","r","parseInt","g","b","gradient","startColour","endColour","value","min","max","startRGB","endRGB","percentFade","fromSource","toSource","fromTarget","toTarget","map","pow","diffRed","diffGreen","diffBlue","round","compatibleCards","card","cardInfo","split","card_color","card_card","filter","cur_card","Array","prototype","remove","what","ax","L","this","indexOf","splice","Cytoscape","use","COSEBilkent","dagre","BreakException","console","log","State","playArea","deck","playerHands","turn","Object","classCallCheck","slice","numPlayers","state","JSON","stringify","MinMaxNode","id","type","player","parent","children","bestCard","prob","pruned","prune","curHand","Number","MAX_VALUE","count_children","node","c","_i","_Object$values","values","get_root","child","bestMove","_i2","_Object$entries","entries","_ref3","_ref2","slicedToArray","x","find","moves","_this","alpha","beta","nextTurn","newHand","newDeck","newPlayArea","move","newPlayerHands","mNode","compat_cards","findBest","suggested_move","updateValue","addChild","isArray","e","depth","nodeType","nodeColor","data","label","getLabel","position","y","_i3","_Object$entries2","_ref6","_ref5","concat","serialize","source","target","toConsumableArray","Set","name","MiniMax","props","_this2","possibleConstructorReturn","getPrototypeOf","call","width","height","root","reset","bind","assertThisInitialized","updateWindowDimensions","rect","ReactDOM","findDOMNode","getBoundingClientRect","setState","window","innerHeight","updateNode","_this3","keys","cy","on","evt","selected_node","debug","setTimeout","layout","run","react_default","createElement","style","className","onClick","react_cytoscape_default","elements","stylesheet","selector","line-color","background-color","shape","React","Component","Uno","cardsPerPlayer","minimax","play","autoPlay","updateMinimax","init","handleChange","checkEnded","getCards","event","update","numCards","setInterval","reduce","prev","cur","aCard","played_card","possible_cards","callback_node","start_state","time","timeEnd","players","game_ended","Uno_Player","key","hand","num","disabled","defaultValue","onChange","Uno_Deck","Uno_PlayArea","src_minimax","Deck","Uno_Card","PlayArea","Player","Card","Boolean","location","hostname","match","render","src_Uno_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92103a26.chunk.js","sourcesContent":["/* eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"] }] */\nexport var COLOR = ['R', 'G', 'B', 'Y']\nexport var COLOR_CARDS = [0,1,2,3,4,5,6,7,8,9,'Skip']\n\nexport function genDeck(shuff=true){\n  var cards = []\n  var extras = []//'W', 'WD4']\n\n  COLOR.forEach(function(color){\n    COLOR_CARDS.forEach(function(colorCard){\n      cards.push(color+':'+colorCard)\n    })\n  })\n\n  extras.forEach(function(extra){\n    cards.push('E:'+extra)\n  })\n\n  if(shuff){\n    shuffle(cards)\n  }\n\n  return cards\n}\n\nfunction hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  var result1 = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } :  {\n    r: parseInt(result1[1], 16)*16,\n    g: parseInt(result1[2], 16)*16,\n    b: parseInt(result1[3], 16)*16\n  };\n}\n\nfunction map(value, fromSource, toSource, fromTarget, toTarget) {\n  return (value - fromSource) / (toSource - fromSource) * (toTarget - fromTarget) + fromTarget;\n}\n\nexport function gradient(startColour, endColour, value, min=0, max=100) {\n  var startRGB = hexToRgb(startColour);\n  var endRGB = hexToRgb(endColour);\n  var percentFade = map(value, min, max, 0, 1);\n  percentFade = Math.pow(percentFade, 1.0/8)\n\n  var diffRed = endRGB.r - startRGB.r;\n  var diffGreen = endRGB.g - startRGB.g;\n  var diffBlue = endRGB.b - startRGB.b;\n\n  diffRed = (diffRed * percentFade) + startRGB.r;\n  diffGreen = (diffGreen * percentFade) + startRGB.g;\n  diffBlue = (diffBlue * percentFade) + startRGB.b;\n\n  var result = \"rgb(\" + Math.round(diffRed) + \", \" + Math.round(diffGreen) + \", \" + Math.round(diffBlue) + \")\";\n  return result;\n}\n\nexport function shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nexport function findCard(card, deck){\n  return deck.filter(function(cur_card){ return cur_card.split(\":\")[1] === card })\n}\n\nexport function findColor(color, deck){\n  return deck.filter(function(cur_card){ return cur_card.split(\":\")[0] === color })\n}\n\nexport function findExtra(deck){\n  return findColor(\"E\", deck)\n}\n\nArray.prototype.remove = function() {\n    var what, a = arguments, L = a.length, ax;\n    var op_arr = this;\n    while (L && op_arr.length) {\n        what = a[--L];\n        while ((ax = op_arr.indexOf(what)) !== -1) {\n            op_arr.splice(ax, 1);\n        }\n    }\n    return op_arr;\n};\n\nexport function compatibleCards(card, cards){\n  var cardInfo = card.split(':')\n  var card_color = cardInfo[0]\n  var card_card = cardInfo[1]\n  // console.log(\"DD\",cards)\n  var compat_cards = cards.filter(function(cur_card){\n    // console.log(\"D\",cur_card)\n    cardInfo = cur_card.split(':')\n    var color = cardInfo[0]\n    var card = cardInfo[1]\n    if(color === 'E'){\n      return true;\n    }else if (color === card_color) {\n      return true;\n    }\n    else if (card === card_card) {\n      return true;\n    }\n    return false;\n  })\n  return compat_cards\n}\n","import {compatibleCards, gradient}   from './utils.js'\nimport Cytoscape from 'cytoscape';\nimport COSEBilkent from 'cytoscape-cose-bilkent';\nimport dagre from 'cytoscape-dagre';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport CytoscapeComponent from 'react-cytoscapejs';\n// import Tree from 'react-tree-graph';\n// import 'react-tree-graph/dist/style.css'\n\nCytoscape.use(COSEBilkent);\nCytoscape.use( dagre );\nvar MAX_DEPTH = 200\nvar MAX_VISIBLE_DEPTH = 10\nvar PRUNED_VALUE = \"NA\"\n\n\n// var allCards=genDeck(false)\nvar BreakException = {};\n// var knownCards = [null]\n// var unknownCards = [null]\n\nconsole.log = function(){}\n\nclass State {\n  constructor(playArea, deck, playerHands, turn){\n    this.playArea = playArea.slice()\n    this.deck = deck.slice()\n    this.playerHands = playerHands.slice()\n    this.turn = turn\n\n    this.numPlayers = this.playerHands.length\n    this.card = this.playArea[this.playArea.length - 1]\n  }\n\n  equals(state){\n    return (state.turn === this.turn &&\n      JSON.stringify(state.playArea) === JSON.stringify(this.playArea) &&\n      JSON.stringify(state.deck) === JSON.stringify(this.deck) &&\n      JSON.stringify(state.playerHands) === JSON.stringify(this.playerHands))\n  }\n\n  copy(){\n    return new State(this.playArea, this.deck, this.playerHands, this.turn)\n  }\n}\nclass MinMaxNode {\n  // var root = new MinMaxNode(\"root\", card, playerHands, turn, numPlayers);\n  constructor(id, type, state, player, card, parent){\n    this.children = {}\n    this.bestCard = null\n    this.card = card\n    // this.knownCards = knownCards // [...new Set(curHand.concat(visible_cards))]\n    // this.unknownCards = unknownCards // allCards.slice().remove(...this.knownCards)\n    this.type = type\n    this.prob = 1\n    this.id = id\n    this.state = state\n    this.player = player\n\n    this.parent = parent\n\n    this.pruned = false\n\n    if(parent){\n      this.prune = parent.prune\n    }else{\n      this.prune = true\n    }\n\n    if(this.state.turn === this.player){\n      this.type = \"max\"\n    }else{\n      this.type = \"min\"\n    }\n    console.log(state, this.state)\n    this.curHand = this.state.playerHands[this.state.turn]\n\n    if(this.type === \"min\"){\n      // this.value = new Array(this.state.numPlayers).fill(Number.MAX_VALUE)\n      // this.value = new Array(this.state.numPlayers).fill(1)\n      this.value = Number.MAX_VALUE\n    }else if (this.type === \"max\") {\n      // this.value = new Array(this.state.numPlayers).fill(-Number.MAX_VALUE)\n      // this.value = new Array(this.state.numPlayers).fill(-5)\n      this.value = -Number.MAX_VALUE\n    }else if (this.type === \"chance\") {\n      this.value = 0\n    }\n    console.log(\"Created Node\", this)\n  }\n\n  getLabel(print_children = false){\n    var children = \"\"\n    if(print_children){\n      children = \" \" + this.count_children()\n    }\n    if(!this.pruned){\n      return \"P\" + this.state.turn + \" : \" + Math.round(this.value * 1000) / 1000 + children\n    }else{\n      return \"P\" + this.state.turn + \" : pruned\"\n    }\n  }\n\n  setProb(prob){\n    this.prob = prob\n  }\n\n  addChild(card, node){\n    this.children[card] = node\n  }\n\n  count_children(){\n      var c = 0 ; //console.debug(node, Object.keys(node.children).length) ;\n      for (const value of Object.values(this.children)) {\n  \t\t\tc+= 1 + value.count_children()\n      }\n      return c\n  }\n\n  get_root(){\n    if(this.parent === null) return this\n    return this.parent.get_root()\n  }\n\n  updateValue(child){\n    var bestMove = null\n    if(this.type === \"min\"){\n      if(this.value > child.value){\n        bestMove = child.card\n        this.value = child.value\n      }\n    }else if (this.type === \"max\") {\n      if(this.value <= child.value){\n        bestMove = child.card\n        this.value = child.value\n      }\n    }else if (this.type === \"chance\") {\n        this.value += child.value*child.prob\n    }\n    return bestMove\n  }\n\n  find(id){\n    if(this.id === id){\n      return this\n    }\n    for (const [card, value] of Object.entries(this.children)) {\n      var x = value.find(id)\n      if(x!==null){\n        return x\n      }\n    }\n    return null\n  }\n\n  findBest(moves, alpha=-Number.MAX_VALUE, beta=Number.MAX_VALUE){\n    if(this.curHand.length === 0){\n      this.value = 1\n      return\n    }\n    // if(moves.length === 0){\n      // this.value = -1\n    // }\n    if(this.id.split(\"_\").length > MAX_DEPTH){\n      this.value = -3\n      console.log(\"Truncated\")\n      return\n    }\n    var bestMove = moves[0]\n    var nextTurn = (this.state.turn + 1)%this.state.numPlayers\n\n    try {\n      if(moves.length === 0){\n        // this.type = \"chance\"\n        console.log(\"Drawing card for \", this, this.state.deck)\n        var newHand = this.curHand.slice()\n        var newDeck = this.state.deck.slice()\n        var newPlayArea = this.state.playArea.slice()\n        if(newDeck.length === 0){\n          this.value = 0\n          return\n          // newDeck = this.state.playArea.slice()\n          // newPlayArea = [newPlayArea[0]]\n        }\n        var move = newDeck.splice(0, 1)\n        newHand.push(move[0])\n        var newPlayerHands = this.state.playerHands.slice()\n        newPlayerHands[this.state.turn] = newHand\n        // var newPlayArea = this.state.playArea.slice()\n        // newPlayArea.push(move)\n        var mNode = new MinMaxNode(this.id + \"_\" + move, \"max\", new State(newPlayArea, newDeck, newPlayerHands, nextTurn), this.player, move[0], this)\n\n        console.log(\"checking compat\",this,nextTurn, newPlayerHands)\n        var compat_cards = compatibleCards(this.state.card, newPlayerHands[nextTurn])\n\n        console.log(\"Finding the best for1 \", mNode, compat_cards)\n        if(!this.pruned){\n          mNode.findBest(compat_cards, alpha, beta)\n\n          var suggested_move = this.updateValue(mNode)\n          if(suggested_move !== null)\n            bestMove = suggested_move\n          if(this.type === \"min\"){\n            alpha = Math.max(alpha, this.value)\n          }else if (this.type === \"max\") {\n            beta = Math.min(beta, this.value)\n          }\n        }else{\n          mNode.value = PRUNED_VALUE\n          mNode.pruned = true\n        }\n        //\n        console.log(\"Adding child \", mNode)\n        this.addChild(move, mNode)\n        if(alpha >= beta && this.prune)\n          this.pruned = true\n          // throw BreakException;\n      }else{\n        console.log(\"Arr \", this, moves)\n        if(Array.isArray(moves)){\n          moves.forEach((move) => {\n            var newHand = this.curHand.slice().remove(move)\n            if(newHand.length === 0 ){\n              if(this.player === this.state.turn){\n                this.value = 1\n              }else{\n                this.value = -10\n              }\n              return\n            }\n            // constructor(id, type, card, playerHands, turn, numPlayers){\n            var newPlayerHands = this.state.playerHands.slice()\n            newPlayerHands[this.state.turn] = newHand\n            var newPlayArea = this.state.playArea.slice()\n            newPlayArea.push(move)\n\n            if(move.split(\":\")[1] === \"Skip\"){\n              nextTurn = (nextTurn + 1)%this.state.numPlayers\n            }\n\n            var mNode = new MinMaxNode(this.id + \"_\" + move, \"max\", new State(newPlayArea, this.state.deck, newPlayerHands, nextTurn), this.player, move, this)\n\n            // var chance_moves = {}\n            // var p = 0\n            //\n            // console.log(unknownCards)\n            // COLOR.forEach((color) => {\n            //   chance_moves[color + \":*\"] = findColor(color,unknownCards).length/(2*unknownCards.length)\n            // })\n            //\n            // COLOR_CARDS.forEach((colorCard) => {\n            //   chance_moves[\"*:\" + colorCard] = findCard(colorCard + \"\",unknownCards).length/(2*unknownCards.length)\n            // })\n            //\n            // // chance_moves[move.split(\":\")[0] + \":*\"] = findColor(move.split(\":\")[0],_unknownCards).length/_unknownCards.length\n            // // chance_moves[\"*:\" + move.split(\":\")[1]] = findCard(move.split(\":\")[1],_unknownCards).length/_unknownCards.length\n            // chance_moves[\"E:*\"] = findExtra(unknownCards).length/unknownCards.length\n            // for (var key in chance_moves) {\n              // if(!isNaN(chance_moves[key]))\n              // p += chance_moves[key];\n              // console.log(\"PROB SUM\", p, key)\n            // }\n            // chance_moves[\"*:*\"] = 1.0 - p\n            var compat_cards = compatibleCards(move, newPlayerHands[nextTurn])\n\n            console.log(\"Finding the best for \", mNode, compat_cards)\n            if(!this.pruned){\n              mNode.findBest(compat_cards, alpha, beta)\n\n              var suggested_move = this.updateValue(mNode)\n              if(suggested_move !== null)\n                bestMove = suggested_move\n              if(this.type === \"min\"){\n                alpha = Math.max(alpha, this.value)\n              }else if (this.type === \"max\") {\n                beta = Math.min(beta, this.value)\n              }\n            }else{\n              mNode.value = PRUNED_VALUE\n              mNode.pruned = true\n            }\n            //\n            console.log(\"Adding child \", mNode)\n            this.addChild(move, mNode)\n            if(alpha >= beta && this.prune)\n              this.pruned = true\n              // throw BreakException;\n          })\n        }else{\n          // for (const [card, prob] of Object.entries(moves)) {\n          //   var mNode = new MinMaxNode(this.id + \"_\" + card, \"max\", card, this.curHand, knownCards)\n          //\n          //   mNode.prob = prob\n          //   var compat_cards = compatibleCards(card, this.curHand)\n          //   if(compat_cards.length === 0){\n          //     mNode.value = -1\n          //   }else{\n          //     // console.log(\"NO COMPATIBLE CARDS\")\n          //     mNode.findBest(compat_cards, alpha, beta)\n          //\n          //     var suggested_move = this.updateValue(mNode)\n          //     if(suggested_move !== null)\n          //       bestMove = suggested_move\n          //     if(this.type === \"min\"){\n          //       alpha = Math.max(alpha, this.value)\n          //     }else if (this.type === \"max\") {\n          //       beta = Math.min(beta, this.value)\n          //     }\n          //\n          //     if(alpha >= beta)\n          //       throw BreakException;\n          //   }\n          //   this.addChild(card, mNode)\n          // }\n        }\n      }\n    }catch (e) {\n      console.log(\"Cutoff\", e)\n      this.pruned = true\n      if (e !== BreakException) throw e;\n    }\n    this.pruned = false\n    this.alpha = alpha\n    this.beta = beta\n    console.log(\"AB\", alpha, beta, this.id)\n    // this.value = Math.round(this.value * 1000) / 1000\n\n    return bestMove\n  }\n\n  serialize(type = \"nested\", depth=0){\n    // console.debug(depth)\n    var result = []\n    var color = \"#ccc\"\n    if(type === \"linear\"){\n      var nodeType = \"ellipse\"\n      if(this.type === \"max\"){\n        nodeType = \"triangle\"\n      }else if (this.type === \"min\") {\n        nodeType = \"vee\"\n      }\n      var nodeColor = \"#666\"\n      if(this.pruned){\n        nodeColor = \"#B71C1C\"\n      }\n\n      result.push({ data : {id: this.id, label: this.getLabel(depth >= MAX_VISIBLE_DEPTH), type: nodeType, color: nodeColor}, position: {x: 100, y: 100}})\n    }\n    for (const [card, value] of Object.entries(this.children)) {\n      if(type === \"linear\"){\n        // console.log(\"T\", card)\n        if(depth < MAX_VISIBLE_DEPTH){\n          result = result.concat(value.serialize(type, depth + 1))\n          if(this.value === value.value){\n            // color = \"#B71C1C\" // RED\n            color = \"#1B5E20\"\n          }else{\n            color = gradient(\"#B71C1C\", \"#1B5E20\", 0)\n            console.log(color, value.prob)\n          }\n          result.push({data: {source: this.id, target: value.id, label: card, color: color}})\n          result = [...new Set(result)]\n        }\n      }else if (type === \"nested\") {\n        result.push({name: card, children: value.serialize(type, depth + 1)})\n      }\n    }\n    console.log(\"Result\", this.id, result)\n    return result\n  }\n}\n\n\n\nexport function minimax(possible_cards, playArea, deck, playerHands, turn, callback_node){\n  // var played_card = minimax(compat_cards, cur_card, playerHands, this.state.turn, this.state.numPlayers, this.updateMinimax)\n  // console.log([possible_cards, card, playerHands, turn, numPlayers, callback_node])\n  var start_state = new State(playArea, deck, playerHands, turn)\n  console.log(start_state)\n  var root = new MinMaxNode(\"root\", \"max\", start_state, turn, null, null);\n  // possible_cards.map(function(card){\n    // root.addChild(card, new MinMaxNode)\n  // })\n\n  console.debug(\"Node\", root, root.count_children())\n  // knownCards = [...new Set(playerHands.flat())]\n  // unknownCards = allCards.slice().remove(...knownCards)\n  console.time('someFunction');\n  var move = root.findBest(possible_cards)\n  console.timeEnd('someFunction')\n  console.debug(\"Node\", root, root.count_children())\n\n  callback_node(root)\n  return move\n}\n\n\nclass MiniMax extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0, root: {}};\n\n    this.reset = this.reset.bind(this)\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n  }\n\n  updateWindowDimensions() {\n    var rect = ReactDOM.findDOMNode(this).getBoundingClientRect()\n    this.setState({ width: rect.width, height: window.innerHeight - rect.y - 120});\n  }\n\n  reset(){\n    this.props.updateNode(this.props.data.get_root())\n  }\n\n  render() {\n    var data = {\n    \tname: 'Start',\n    \tchildren: []\n    };\n\n    data = []\n    console.log(\"T\")\n    if(Object.keys(this.props.data).length !== 0){\n      // data.children = this.props.data.serialize(\"linear\")\n      data = this.props.data.serialize(\"linear\")\n    }\n\n    console.log(this.cy)\n    var _this = this\n    if(this.cy !== undefined){\n      this.cy.on('click', 'node', function(evt){\n        console.log( 'clicked ' + this.id() );\n        var selected_node = _this.props.data.find(this.id())\n        console.debug(selected_node, _this.props.data)\n        // if(_this.props.data.id === selected_node.id){\n          // selected_node = selected_node.get_root()\n        // }\n        _this.props.updateNode(selected_node)\n      });\n    }\n    setTimeout(function(){_this.cy.layout({name: 'dagre'}).run(); console.log(\"done\")}, 100)\n    console.log(\"DATA\", data)\n    const layout = { name: 'random' };\n    var children = 0\n    if(this.props.data instanceof MinMaxNode){\n      children = this.props.data.count_children()\n    }\n    return (\n      <div style={{height: \"100%\"}}>\n        <h2>MiniMax : {children} &nbsp;&nbsp;&nbsp;\n        <button className=\"btn btn-info\" onClick={this.reset}>Reset Graph</button></h2>\n        <CytoscapeComponent elements={data} style={{ width: this.state.width + 'px', height: this.state.height + 'px' }}  layout={layout} cy={cy => this.cy = cy}\n          stylesheet={[{\n              selector: 'edge',\n              style: {\n                'line-color': 'data(color)',\n                'label': 'data(label)' // maps to data.label\n              }\n            },\n            {\n                selector: 'node',\n                style: {\n                  'background-color': 'data(color)',\n                  \"shape\": \"data(type)\",\n                  'label': 'data(label)' // maps to data.label\n                }\n            }\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MiniMax;\n","import React from 'react';\nimport {genDeck, compatibleCards} from './utils.js'\nimport MiniMax, {minimax} from './minimax.js'\nimport './Uno.css';\n\nclass Uno extends React.Component {\n  constructor(props) {\n    super(props);\n    var numPlayers = 3\n    var cardsPerPlayer = 4\n    var playerHands = []\n    for(var i = 0; i<=numPlayers-1; i++){\n      playerHands.push([]);\n    }\n    this.state = { numPlayers: numPlayers, cardsPerPlayer: cardsPerPlayer, deck: [], playerHands: playerHands, turn: 0, playArea: [], minimax: {}};\n\n    this.play = this.play.bind(this);\n    this.autoPlay = this.autoPlay.bind(this);\n    this.updateMinimax = this.updateMinimax.bind(this);\n    this.init = this.init.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.checkEnded = this.checkEnded.bind(this);\n\n  }\n\n  init(){\n    var deck = genDeck()\n    var playerHands = []\n    var numPlayers = this.state.numPlayers\n    var cardsPerPlayer = this.state.cardsPerPlayer\n    this.setState({ deck: deck}, function(){\n      for(var i = 0; i<=numPlayers-1; i++){\n        playerHands.push(this.getCards(cardsPerPlayer));\n      }\n      var playArea = this.getCards();\n      this.setState({ numPlayers: numPlayers, cardsPerPlayer: cardsPerPlayer, deck: deck, playerHands: playerHands, turn: 0, playArea: playArea, minimax: {} });\n    })\n  }\n\n  componentDidMount() {\n }\n\n handleChange(event){\n   console.debug(event, event.target.name)\n   var update = {}\n   update[event.target.name] = +event.target.value\n   this.setState(update)\n }\n\n getCards(numCards=1){\n   return this.state.deck.splice(0, numCards)\n }\n\n autoPlay(){\n   setInterval(this.play,1000)\n }\n\n updateMinimax(node){\n   this.setState({minimax: node})\n }\n\n checkEnded(){\n   console.debug(this.state.playerHands)\n   return this.state.playerHands === undefined || this.state.playerHands.map(function(e){ return e.length === 0 }).reduce(function(prev, cur){ return prev || cur }, false)\n }\n\n play(){\n   console.log(\"Playing\")\n   var cur_card = this.state.playArea[this.state.playArea.length-1]\n   var nextTurn = (this.state.turn + 1)%this.state.numPlayers\n   var playerHands = this.state.playerHands\n   var curHand = this.state.playerHands[this.state.turn]\n   var playArea = this.state.playArea\n\n   var compat_cards = compatibleCards(cur_card, curHand)\n   console.log(compat_cards, curHand)\n\n   if(compat_cards.length === 0){\n     var aCard = this.getCards()\n     curHand = curHand.concat(aCard)\n   }else{\n     var played_card = minimax(compat_cards, this.state.playArea, this.state.deck, this.state.playerHands, this.state.turn, this.updateMinimax)\n     curHand.remove(played_card)\n     playArea.push(played_card)\n\n     if(played_card.split(\":\")[0] === \"E\"){\n       playArea.push(\"R:C\") // TODO : Change to color changing logic\n     }\n   }\n\n   playerHands[this.state.turn] = curHand\n   console.log(playerHands, curHand)\n   this.setState({turn: nextTurn, playerHands: playerHands, playArea: playArea})\n }\n\n  render() {\n    var players = []\n    var game_ended = this.checkEnded()\n    console.debug(game_ended)\n    for(var i = 0; i<this.state.numPlayers; i++){\n      players.push(<Player key={i} hand={this.state.playerHands[i]} turn={this.state.turn===i} num={i}/>)\n    }\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h2>Uno Board</h2>\n          </div>\n          <div className=\"col\">\n            <button className=\"btn-success btn\" disabled={game_ended} onClick={this.play}>Play</button>\n            <button className=\"btn-warning btn\" disabled={game_ended} onClick={this.autoPlay}>Auto Play</button>\n          </div>\n          <div className=\"col\">\n            <div className=\"row\">\n              <div className=\"col-md-2\">\n                <button className=\"btn-danger btn\" onClick={this.init}>Init</button>\n              </div>\n              <div className=\"col-md-3\">\n                <div className=\"form-group form-inline\">\n                  <label>cards <input type=\"text\" defaultValue={this.state.cardsPerPlayer} style={{width:\"40px\"}} name=\"cardsPerPlayer\" className=\"form-control\" onChange={this.handleChange} /></label>\n                </div>\n              </div>\n              <div className=\"col-md-2\">\n                <div className=\"form-group form-inline\">\n                  <label>players <input type=\"text\" defaultValue={this.state.numPlayers} style={{width:\"40px\"}} name=\"numPlayers\" className=\"form-control\" onChange={this.handleChange} /></label>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Deck cards={this.state.deck}/>\n          </div>\n          <div className=\"col\">\n            <PlayArea cards={this.state.playArea}/>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            {players}\n          </div>\n          <div className=\"col-md-9\">\n            <MiniMax data={this.state.minimax} updateNode={this.updateMinimax} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Deck extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  render() {\n    var cards = this.props.cards.map(function(card){\n      return (<Card card={card} key={card}/>)\n    })\n    return (\n      <div>\n        <h2>Deck</h2>\n        {cards}\n      </div>\n    );\n  }\n}\n\nclass PlayArea extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  render() {\n    var cards = this.props.cards.map(function(card){\n      console.log(\"PCARD\", card)\n      return (<Card card={card} key={card}/>)\n    })\n    return (\n      <div>\n        <h2>Play Area</h2>\n        {cards}\n      </div>\n    );\n  }\n}\n\nclass Player extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   // this.state = { world: world };\n  // }\n\n  render() {\n    var cards = this.props.hand.map(function(card){return (<Card card={card} key={card}/>)})\n    var className = \"\"\n    if(this.props.turn)\n      className = \"active\"\n    return (\n      <div>\n        <h2 className={className}>Player {this.props.num}</h2>\n        {cards}\n      </div>\n    );\n  }\n}\n\nclass Card extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   // this.state = { world: world };\n  // }\n\n  render() {\n    var className = \"unoCard \"\n    var cardInfo = this.props.card.split(\":\")\n    var color = cardInfo[0]\n    var card = cardInfo[1]\n    className += color + \" \";\n    className += card + \" \";\n    return (\n      <div className={className}>\n        {card}\n      </div>\n    );\n  }\n}\n\n\nexport default Uno;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Uno from './Uno';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Uno />, document.getElementById('react_main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}